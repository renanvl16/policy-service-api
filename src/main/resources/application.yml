# Configuração do Spring Boot
spring:
  application:
    name: policy-request-service
  
  # Configuração do banco de dados PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5432/policy_request_db
    username: ${DB_USERNAME:policy_user}
    password: ${DB_PASSWORD:policy_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # Configuração do JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
  
  # Configuração para execução assíncrona
  task:
    execution:
      pool:
        core-size: 10
        max-size: 20
        queue-capacity: 100
      thread-name-prefix: async-task-
  
  # Configuração do Flyway
  flyway:
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1
  
  # Configuração do Kafka
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:policy-request-service}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
      properties:
        isolation.level: read_committed
    listener:
      ack-mode: manual_immediate

# Configurações específicas da aplicação
fraud-analysis:
  api:
    url: ${FRAUD_API_URL:http://localhost:9999/fraud-analysis}
  mock:
    enabled: ${FRAUD_MOCK_ENABLED:true}

# Configuração dos tópicos Kafka
kafka:
  topics:
    policy-requests:
      events: ${KAFKA_TOPIC_POLICY_EVENTS:policy-requests.events}
    payments: ${KAFKA_TOPIC_PAYMENTS:payments.events}
    underwriting: ${KAFKA_TOPIC_UNDERWRITING:underwriting.events}
  consumer:
    group-id: ${KAFKA_CONSUMER_GROUP:policy-request-service}

# Configuração do servidor
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /
  error:
    include-stacktrace: on_param

# Configuração do Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# Configuração de logging
logging:
  level:
    com.acme.policyapi: ${LOG_LEVEL:INFO}
    org.springframework.kafka: WARN
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Configuração do OpenAPI/Swagger
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: Policy Request Service API
    description: API para gerenciamento de solicitações de apólices de seguro
    version: 1.0.0
    contact:
      name: Sistema ACME
      email: dev@acme.com