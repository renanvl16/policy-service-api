services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: policy-postgres
    environment:
      POSTGRES_DB: policy_request_db
      POSTGRES_USER: policy_user
      POSTGRES_PASSWORD: policy_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - policy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U policy_user -d policy_request_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: policy-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - policy-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: policy-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - policy-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação Policy Service API
  policy-service-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: policy-service-api
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Database
      DB_USERNAME: policy_user
      DB_PASSWORD: policy_password
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/policy_request_db
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONSUMER_GROUP: policy-request-service
      KAFKA_TOPIC_POLICY_EVENTS: policy-requests.events
      KAFKA_TOPIC_PAYMENTS: payments.events
      KAFKA_TOPIC_UNDERWRITING: underwriting.events
      
      # Application
      SERVER_PORT: 8080
      LOG_LEVEL: INFO
      SHOW_SQL: false
      
      # Fraud Analysis (Mock)
      FRAUD_API_URL: http://localhost:9999/fraud-analysis
      FRAUD_MOCK_ENABLED: true
      
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - policy-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  policy-network:
    driver: bridge